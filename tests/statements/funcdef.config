def f():
    return 1


def g(*x):
    return tuple(map(len, x))


def h(x, y, *z, n, m, **kw):
    return 1


def h_with_defaults(x, y=1, *z, n, m=2, **kw):
    return 1


def assertion(x):
    assert x
    assert x is not None, 'x is None!'
    return x


def doc():
    """docstring"""
    return None


def inc_first(x):
    y = g(*x)
    return (y[0] + 1, *y[1:])


def qsort(x):
    ref = x[0]
    lower = list(filter(lambda v: v < ref, x))
    greater = list(filter(lambda v: v > ref, x))
    eq = list(filter(lambda v: v == ref, x))
    return x if len(x) <= 1 else qsort(lower) + eq + qsort(greater)


def returner(value):
    return lambda: value


def adder(func):
    return lambda x: func(x) + 1


@adder
def one(x):
    return x


@adder
@adder
def two(x):
    return x


@adder
@adder
@adder
def three(x):
    return x


def append(n):
    def decorator(func):
        def wrapper():
            return (*func(), n)

        return wrapper

    return decorator


@append(4)
@append(3)
@append(2)
@append(1)
def order():
    return 0,


def unpack(x):
    y, z = x
    return y + z


def nested_unpack(x):
    y, [z, t] = x
    return y, z, t


def deep_unpack(x):
    [[[[[y]]]]], z = x
    return y, z


def single_unpack(x):
    y, = x
    return y
